library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library grlib;
use grlib.amba.all;
use grlib.stdlib.all;
use grlib.devices.all;
library gaisler;
use gaisler.misc.all;
library UNISIM;
use UNISIM.VComponents.all;

-- ENTITY FOR THE STATE MACHINE
ENTITY state_machine IS
  PORT(
    
-- clock and reset
    clkm : in std_logic;
    rstn : in std_logic;
    
-- AHB Master records --------------
    dmai : out ahb_dma_in_type;
    dmao : in ahb_dma_out_type;
    
-- ARM Cortex-M0 AHB-Lite signals -- 
    HADDR : in std_logic_vector (31 downto 0); -- AHB transaction address
    HSIZE : in std_logic_vector (2 downto 0); -- AHB size: byte, half-word or word
    HTRANS : in std_logic_vector (1 downto 0); -- AHB transfer: non-sequential only
    HWDATA : in std_logic_vector (31 downto 0); -- AHB write-data
    HWRITE : in std_logic; -- AHB write control
    HREADY : out std_logic -- AHB stall signal
    
  );
END state_machine;

-- ARCHITECTURE FOR THE STATE MACHINE
ARCHITECTURE structural OF state_machine IS
  
  COMPONENT CORTEXM0DS IS
    PORT(
      HCLK : IN std_logic;              -- Clock
      HRESETn : IN std_logic;           -- Asynchronous reset
    
      HADDR : OUT std_logic_vector (31 downto 0);             -- AHB transaction address
      HBURST : OUT std_logic_vector (2 downto 0);            -- AHB burst: tied to single
      HMASTLOCK : OUT std_logic;         -- AHB locked transfer (always zero)
      HPROT : OUT std_logic_vector (3 downto 0);              -- AHB protection: priv; data or inst
      HSIZE : OUT std_logic_vector (2 downto 0);             -- AHB size: byte, half-word or word
      HTRANS : OUT std_logic_vector (1 downto 0);            -- AHB transfer: non-sequential only
      HWDATA : OUT std_logic_vector (31 downto 0);             -- AHB write-data
      HWRITE : OUT std_logic;            -- AHB write control
      HRDATA : IN std_logic_vector (31 downto 0);            -- AHB read-data
      HREADY : IN std_logic;            -- AHB stall signal
      HRESP : IN std_logic;             -- AHB error response
      
      NMI : IN std_logic;  
      IRQ : IN std_logic_vector (15 downto 0);               -- Interrupt request inputs
      TXEV : OUT std_logic;              -- Event output (SEV executed)
      RXEV : IN std_logic;              -- Event input
      LOCKUP : OUT std_logic;            -- Core is locked-up
      SYSRESETREQ : OUT std_logic;       -- System reset request
    
      SLEEPING : OUT std_logic          -- Core and NVIC sleeping           
    );
    
  END COMPONENT;
  COMPONENT ahbmst IS
    PORT(
      rst  : in  std_ulogic;
      clk  : in  std_ulogic;
      dmai : in ahb_dma_in_type;
      dmao : out ahb_dma_out_type;
      ahbi : in  ahb_mst_in_type;
      ahbo : out ahb_mst_out_type 
    );
    
  END COMPONENT;
  
  TYPE state_type IS (IDLE, instr_fetch);
  SIGNAL currentState, nextState: state_type;


BEGIN
  
  --dmai signals connected directly from the CortexM0
  dmai.address <= HADDR;
  dmai.size <= HSIZE;
  dmai.wdata <= HWDATA;
  dmai.write <= HWRITE;
  
  -- dmai signals connected to the ground/not connected
  dmai.busy <= '0';
  dmai.irq <= '0';
  dmai.burst <= '0';
    
  state_machine: PROCESS(currentState, HTRANS)
  BEGIN  
    
    CASE currentState IS 
      
      WHEN IDLE =>        
        IF HTRANS = "10" THEN
          nextState <= instr_fetch;
        ELSE
          nextState <= IDLE;
        END IF;
        
      WHEN instr_fetch =>
        IF dmao.ready = '1' THEN
          nextState <= IDLE;
        ELSE
          nextState <= IDLE;
        END IF;
        
      WHEN OTHERS => 
        nextState <= IDLE;
    END CASE;
  END PROCESS;
  
  output_logic: PROCESS(currentState)
  BEGIN
    
    HREADY <= '0';
    dmai.start <= '0';
    
    CASE currentState IS 
         
      WHEN IDLE =>
        HREADY <= '1';
        dmai.start <= '0';
        
      WHEN instr_fetch =>
        HREADY <= '0';
        dmai.start <= '0';
        
      WHEN OTHERS => 
        HREADY <= '0';
        dmai.start <= '0';
    
    END CASE;
  END PROCESS;
    

  stateReg: PROCESS(rstn,clkm)
  BEGIN
    IF rstn = '1'  THEN
      currentState <= IDLE;
    ELSIF clkm'event AND clkm = '1' THEN
      currentState <= nextState;
    END IF;
  END PROCESS;
  
END structural;
