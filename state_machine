library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library grlib;
use grlib.amba.all;
use grlib.stdlib.all;
use grlib.devices.all;
library gaisler;
use gaisler.misc.all;
library UNISIM;
use UNISIM.VComponents.all;

entity AHB_bridge is
 port(
 -- Clock and Reset -----------------
 clkm : in std_logic;
 rstn : in std_logic;
 -- AHB Master records --------------
 ahbmi : in ahb_mst_in_type;
 ahbmo : out ahb_mst_out_type;
 -- ARM Cortex-M0 AHB-Lite signals -- 
 HADDR : in std_logic_vector (31 downto 0); -- AHB transaction address
 HSIZE : in std_logic_vector (2 downto 0); -- AHB size: byte, half-word or word
 HTRANS : in std_logic_vector (1 downto 0); -- AHB transfer: non-sequential only
 HWDATA : in std_logic_vector (31 downto 0); -- AHB write-data
 HWRITE : in std_logic; -- AHB write control
 HRDATA : out std_logic_vector (31 downto 0); -- AHB read-data
 HREADY : out std_logic -- AHB stall signal
 );
end;

architecture structural of AHB_bridge is

--declare a component for state_machine 
--declare a component for ahbmst 
--declare a component for data_swapper 
 
signal dmai : ahb_dma_in_type;
signal dmao : ahb_dma_out_type;

begin

--instantiate state_machine component and make the connections:
  state_machine: PROCESS(curState, rxData, rxNow)
  BEGIN  
    aNNN_valid <= '0';
    rxDone <= '0';
    
    CASE curState IS 
      
      WHEN IDLE =>
        bcd_array <= ("1111", "1111", "1111");  -- initialise the array
        numWords_bcd <= BCD_array;
        IF rxNow = '1' THEN
          rxDone<= '1';
          IF rxData = X"61" OR rxData = X"41" THEN --in decimal 97(a) and 65(A)
            nextState <= READ_A_a;
          ELSE
            nextState <= IDLE;
          END IF;
        END IF;
        
      WHEN instr_fetch =>
        IF rxNow = '1' THEN
          rxDone<= '1';
          IF ((rxData >= X"30") OR (rxData <= X"39")) THEN
            nextState <= READ_N1;
          ELSIF (rxData = X"61" OR rxData = X"41") THEN
            nextState <= READ_A_a;
          ELSE
            nextState <= IDLE;
          END IF;
        END IF;
        
      WHEN OTHERS => 
        nextState <= IDLE;
    END CASE;
  END PROCESS;

  stateReg: PROCESS(reset,clk)
  BEGIN
    IF reset = '1'  THEN
      curState <= IDLE;
    ELSIF clk'event AND clk = '1' THEN
      curState <= nextState;
    END IF;
  END PROCESS;

--instantiate the ahbmst component and make the connections 
--instantiate the data_swapper component and make the connections

end structural;
