library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library grlib;
use grlib.amba.all;
use grlib.stdlib.all;
use grlib.devices.all;
library gaisler;
use gaisler.misc.all;
library UNISIM;
use UNISIM.VComponents.all;

entity cm0_wrapper is
 port(
 -- Clock and Reset -----------------
 clkm : in std_logic;
 rstn : in std_logic;
 -- AHB Master records --------------
 ahbmi : in ahb_mst_in_type;
 ahbmo : out ahb_mst_out_type;
 
 -- LED port
 MY_LED : out std_logic
 );

end cm0_wrapper;

architecture structural of cm0_wrapper is
 component CORTEXM0DS is 
	port(
  HCLK : IN std_logic;              -- Clock
  HRESETn : IN std_logic;           -- Asynchronous reset
  HRDATA : IN std_logic_vector (31 downto 0);            -- AHB read-data
  HREADY : IN std_logic;            -- AHB stall signal
  HRESP : IN std_logic;             -- AHB error response
  NMI : IN std_logic;
  IRQ : IN std_logic_vector (15 downto 0);               -- Interrupt request inputs
  RXEV : IN std_logic;              -- Event input

  HADDR : OUT std_logic_vector (31 downto 0);             -- AHB transaction address
  HBURST : OUT std_logic_vector (2 downto 0);            -- AHB burst: tied to single
  HMASTLOCK : OUT std_logic;         -- AHB locked transfer (always zero)
  HPROT : OUT std_logic_vector (3 downto 0);              -- AHB protection: priv; data or inst
  HSIZE : OUT std_logic_vector (2 downto 0);             -- AHB size: byte, half-word or word
  HTRANS : OUT std_logic_vector (1 downto 0);            -- AHB transfer: non-sequential only
  HWDATA : OUT std_logic_vector (31 downto 0);             -- AHB write-data
  HWRITE : OUT std_logic;            -- AHB write control
  TXEV : OUT std_logic;              -- Event output (SEV executed)
  LOCKUP : OUT std_logic;            -- Core is locked-up
  SYSRESETREQ : OUT std_logic;       -- System reset request
  SLEEPING : OUT std_logic          -- Core and NVIC sleeping
    
 );
 end component;

 component AHB_bridge is 
	port(
  	   -- Clock and Reset -----------------
   clkm : in std_logic;
   rstn : in std_logic;
   -- AHB Master records --------------
   ahbmi : in ahb_mst_in_type;
   ahbmo : out ahb_mst_out_type;
   -- ARM Cortex-M0 AHB-Lite signals -- 
   HADDR : in std_logic_vector (31 downto 0); -- AHB transaction address
   HSIZE : in std_logic_vector (2 downto 0); -- AHB size: byte, half-word or word
   HTRANS : in std_logic_vector (1 downto 0); -- AHB transfer: non-sequential only
   HWDATA : in std_logic_vector (31 downto 0); -- AHB write-data
   HWRITE : in std_logic; -- AHB write control
   HRDATA : out std_logic_vector (31 downto 0); -- AHB read-data
   HREADY : out std_logic -- AHB stall signal
  );
  end component;
  
 signal HADDR : std_logic_vector (31 downto 0); -- AHB transaction address
 signal HSIZE : std_logic_vector (2 downto 0); -- AHB size: byte, half-word or word
 signal HTRANS : std_logic_vector (1 downto 0); -- AHB transfer: non-sequential only
 signal HWDATA : std_logic_vector (31 downto 0); -- AHB write-data
 signal HWRITE : std_logic;                      -- AHB write control
 signal HRDATA : std_logic_vector (31 downto 0); -- AHB read-data
 signal HREADY : std_logic;                       -- AHB stall signal
 signal led : std_logic;
 
begin
  
 Processor : CORTEXM0DS	
  port map (
	-- CLOCK AND RESETS ------------------
  HCLK => clkm,              -- Clock
  HRESETn => rstn,           -- Asynchronous reset

  -- INPUTS
  HRDATA => HRDATA,
  HREADY => HREADY,            
               

  -- UNCONNECTED INPUTS
  HRESP => '0',
  NMI => '0',
  IRQ => "0000000000000000",        
  RXEV => '0',
  
  -- OUTPUTS
  HADDR => HADDR,        
  HSIZE => HSIZE,            
  HTRANS => HTRANS,            
  HWDATA => HWDATA,             
  HWRITE => HWRITE,            
                
  -- UNCONNECTED OUTPUTS
  HBURST => OPEN,
  HMASTLOCK => OPEN,
  HPROT => OPEN,
  TXEV => OPEN,
  LOCKUP => OPEN, 
  SYSRESETREQ => OPEN,      
  SLEEPING => OPEN      
  	);
       
    bridge : AHB_bridge
     port map(
       HADDR => HADDR,
       HSIZE => HSIZE,
       HTRANS => HTRANS,
       HWDATA => HWDATA,
       HWRITE => HWRITE,
       HRDATA => HRDATA,
       HREADY => HREADY,
       clkm => clkm,
       rstn => rstn,
       ahbmi => ahbmi,
       ahbmo => ahbmo
       );

process (HRDATA, clkm)
begin

	IF  (falling_edge(clkm)) AND (HRDATA(31 downto 0)="11110010111100101111001011110010") THEN
		MY_LED <= '1';
	end if;

end process;
end structural;
